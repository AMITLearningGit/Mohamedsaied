
Dio_LayeredArchitecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000002e4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c93  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00001107  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c4  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064e  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000487  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000028c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  7a:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WriteChannel>:
	//port of the channel? 4 ports 0 ~ 3 
	
	 Dio_PortType portx=channelId/8; // 1/8=0 , 0~ 3
	 
	 //position of the channel inside the port 0~7
	 Dio_ChannelType pos= channelId % 8; //7
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
	 
	 switch(portx){
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <Dio_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <Dio_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <Dio_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <Dio_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <Dio_WriteChannel+0xca>
  9c:	08 95       	ret
		 case Dio_PortA:
			
					if (Level==STD_HIGH)
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <Dio_WriteChannel+0x3a>
					{
						SET_BIT(PORTA_REG,pos); // PORTA_REG |=(1<<1)
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dio_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dio_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
					}
					else{
						CLEAR_BIT(PORTA_REG,pos);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <Dio_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	9a 95       	dec	r25
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Dio_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
					}
					break;
					
		 case Dio_PortB:
		 	if (Level==STD_HIGH)
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <Dio_WriteChannel+0x74>
		 	{
			 	SET_BIT(PORTB_REG,pos); // PORTA_REG |=(1<<pos)
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
		 	}
		 	else{
			 	CLEAR_BIT(PORTB_REG,pos);
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	9a 95       	dec	r25
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		 	}
		 	break;
		 case Dio_PortC:
			 if (Level==STD_HIGH)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <Dio_WriteChannel+0xae>
			 {
				 SET_BIT(PORTC_REG,pos); // PORTA_REG |=(1<<pos)
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
			 }
			else{
				 CLEAR_BIT(PORTC_REG,pos);
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
			 }
			break;
		 case Dio_PortD:
			if (Level==STD_HIGH)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <Dio_WriteChannel+0xe8>
			{
				 SET_BIT(PORTD_REG,pos); // PORTA_REG |=(1<<pos)
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
			}
			else{
				 CLEAR_BIT(PORTD_REG,pos);
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <Dio_WritePort>:
	
}

void Dio_WritePort(Dio_PortType port,uint8 value){
	
	switch(port){
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <Dio_WritePort+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <Dio_WritePort+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <Dio_WritePort+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <Dio_WritePort+0x1c>
 194:	08 95       	ret
		case Dio_PortA:
				PORTA_REG=value;
 196:	6b bb       	out	0x1b, r22	; 27
				break;
 198:	08 95       	ret
		case Dio_PortB:
				PORTB_REG=value;
 19a:	68 bb       	out	0x18, r22	; 24
				break;
 19c:	08 95       	ret
		case Dio_PortC:
				PORTC_REG=value;
 19e:	65 bb       	out	0x15, r22	; 21
				break;
 1a0:	08 95       	ret
		case Dio_PortD:
			PORTD_REG=value;
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <Dio_Init>:
/*PD7*/	{Output,STD_LOW}
	
	
};

void Dio_Init(){
 1a6:	e0 e6       	ldi	r30, 0x60	; 96
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_PortA:
					CLEAR_BIT(DDRA_REG,pos);
					break;
				case Dio_PortB:
					CLEAR_BIT(DDRB_REG,pos);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
void Dio_Init(){
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
		Dio_PortType portx=counter/8;
 1b0:	98 2f       	mov	r25, r24
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	96 95       	lsr	r25
		Dio_ChannelType pos=counter % 8;
 1b8:	38 2f       	mov	r19, r24
 1ba:	37 70       	andi	r19, 0x07	; 7
		if (pin_cfg[counter].pinDirection==Output)
 1bc:	20 81       	ld	r18, Z
 1be:	21 30       	cpi	r18, 0x01	; 1
 1c0:	a1 f5       	brne	.+104    	; 0x22a <Dio_Init+0x84>
		{
			switch (portx)
 1c2:	91 30       	cpi	r25, 0x01	; 1
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <Dio_Init+0x42>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <Dio_Init+0x2c>
 1c8:	92 30       	cpi	r25, 0x02	; 2
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <Dio_Init+0x58>
 1cc:	93 30       	cpi	r25, 0x03	; 3
 1ce:	11 f1       	breq	.+68     	; 0x214 <Dio_Init+0x6e>
 1d0:	63 c0       	rjmp	.+198    	; 0x298 <Dio_Init+0xf2>
			{
				case Dio_PortA:
						SET_BIT(DDRA_REG,pos);
 1d2:	9a b3       	in	r25, 0x1a	; 26
 1d4:	ba 01       	movw	r22, r20
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_Init+0x36>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	3a 95       	dec	r19
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_Init+0x32>
 1e0:	9b 01       	movw	r18, r22
 1e2:	29 2b       	or	r18, r25
 1e4:	2a bb       	out	0x1a, r18	; 26
						break;
 1e6:	58 c0       	rjmp	.+176    	; 0x298 <Dio_Init+0xf2>
				case Dio_PortB:
						SET_BIT(DDRB_REG,pos);
 1e8:	97 b3       	in	r25, 0x17	; 23
 1ea:	ba 01       	movw	r22, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_Init+0x4c>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	3a 95       	dec	r19
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_Init+0x48>
 1f6:	9b 01       	movw	r18, r22
 1f8:	29 2b       	or	r18, r25
 1fa:	27 bb       	out	0x17, r18	; 23
						break;
 1fc:	4d c0       	rjmp	.+154    	; 0x298 <Dio_Init+0xf2>
				case Dio_PortC:
						SET_BIT(DDRC_REG,pos);
 1fe:	94 b3       	in	r25, 0x14	; 20
 200:	ba 01       	movw	r22, r20
 202:	02 c0       	rjmp	.+4      	; 0x208 <Dio_Init+0x62>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	3a 95       	dec	r19
 20a:	e2 f7       	brpl	.-8      	; 0x204 <Dio_Init+0x5e>
 20c:	9b 01       	movw	r18, r22
 20e:	29 2b       	or	r18, r25
 210:	24 bb       	out	0x14, r18	; 20
						break;
 212:	42 c0       	rjmp	.+132    	; 0x298 <Dio_Init+0xf2>
				case Dio_PortD:
						SET_BIT(DDRD_REG,pos);
 214:	91 b3       	in	r25, 0x11	; 17
 216:	ba 01       	movw	r22, r20
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_Init+0x78>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	3a 95       	dec	r19
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_Init+0x74>
 222:	9b 01       	movw	r18, r22
 224:	29 2b       	or	r18, r25
 226:	21 bb       	out	0x11, r18	; 17
						break;
 228:	37 c0       	rjmp	.+110    	; 0x298 <Dio_Init+0xf2>
			}//switch
		}//if
		else{
			switch (portx)
 22a:	91 30       	cpi	r25, 0x01	; 1
 22c:	91 f0       	breq	.+36     	; 0x252 <Dio_Init+0xac>
 22e:	28 f0       	brcs	.+10     	; 0x23a <Dio_Init+0x94>
 230:	92 30       	cpi	r25, 0x02	; 2
 232:	d9 f0       	breq	.+54     	; 0x26a <Dio_Init+0xc4>
 234:	93 30       	cpi	r25, 0x03	; 3
 236:	29 f1       	breq	.+74     	; 0x282 <Dio_Init+0xdc>
 238:	2f c0       	rjmp	.+94     	; 0x298 <Dio_Init+0xf2>
			{
				case Dio_PortA:
					CLEAR_BIT(DDRA_REG,pos);
 23a:	2a b3       	in	r18, 0x1a	; 26
 23c:	ba 01       	movw	r22, r20
 23e:	02 c0       	rjmp	.+4      	; 0x244 <Dio_Init+0x9e>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	3a 95       	dec	r19
 246:	e2 f7       	brpl	.-8      	; 0x240 <Dio_Init+0x9a>
 248:	96 2f       	mov	r25, r22
 24a:	90 95       	com	r25
 24c:	92 23       	and	r25, r18
 24e:	9a bb       	out	0x1a, r25	; 26
					break;
 250:	23 c0       	rjmp	.+70     	; 0x298 <Dio_Init+0xf2>
				case Dio_PortB:
					CLEAR_BIT(DDRB_REG,pos);
 252:	27 b3       	in	r18, 0x17	; 23
 254:	ba 01       	movw	r22, r20
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_Init+0xb6>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	3a 95       	dec	r19
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_Init+0xb2>
 260:	96 2f       	mov	r25, r22
 262:	90 95       	com	r25
 264:	92 23       	and	r25, r18
 266:	97 bb       	out	0x17, r25	; 23
					break;
 268:	17 c0       	rjmp	.+46     	; 0x298 <Dio_Init+0xf2>
				case Dio_PortC:
					CLEAR_BIT(DDRC_REG,pos);
 26a:	24 b3       	in	r18, 0x14	; 20
 26c:	ba 01       	movw	r22, r20
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Dio_Init+0xce>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	3a 95       	dec	r19
 276:	e2 f7       	brpl	.-8      	; 0x270 <Dio_Init+0xca>
 278:	96 2f       	mov	r25, r22
 27a:	90 95       	com	r25
 27c:	92 23       	and	r25, r18
 27e:	94 bb       	out	0x14, r25	; 20
					break;
 280:	0b c0       	rjmp	.+22     	; 0x298 <Dio_Init+0xf2>
				case Dio_PortD:
					CLEAR_BIT(DDRD_REG,pos);
 282:	21 b3       	in	r18, 0x11	; 17
 284:	ba 01       	movw	r22, r20
 286:	02 c0       	rjmp	.+4      	; 0x28c <Dio_Init+0xe6>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	3a 95       	dec	r19
 28e:	e2 f7       	brpl	.-8      	; 0x288 <Dio_Init+0xe2>
 290:	96 2f       	mov	r25, r22
 292:	90 95       	com	r25
 294:	92 23       	and	r25, r18
 296:	91 bb       	out	0x11, r25	; 17

void Dio_Init(){
	
	//loop on all pins , set DDR 
	uint8 counter;
	for(counter=Dio_Channel_A0;counter<PINCOUNT;counter++){
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	32 96       	adiw	r30, 0x02	; 2
 29c:	80 32       	cpi	r24, 0x20	; 32
 29e:	09 f0       	breq	.+2      	; 0x2a2 <Dio_Init+0xfc>
 2a0:	87 cf       	rjmp	.-242    	; 0x1b0 <Dio_Init+0xa>
			}
		}
		
}//for loop
	
 2a2:	08 95       	ret

000002a4 <main>:
#include "dio_cfg.h"
#include "STD_Types.h"

int main(void)
{
  Dio_Init();
 2a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_Init>
 // Dio_WriteChannel(Dio_Channel_A0,STD_HIGH);//activate pull-up
    while (1) 
    {
		//7 segment Enable
	 Dio_WriteChannel(Dio_Channel_B1,STD_HIGH);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	89 e0       	ldi	r24, 0x09	; 9
 2ac:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	 Dio_WriteChannel(Dio_Channel_B2,STD_HIGH);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	//Display 1
	for(uint8 num=0;num<10;num++){
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
		Dio_WritePort(Dio_PortA,(num<<4));
 2ba:	6c 2f       	mov	r22, r28
 2bc:	62 95       	swap	r22
 2be:	60 7f       	andi	r22, 0xF0	; 240
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x28>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x32>
 2d6:	00 00       	nop
    {
		//7 segment Enable
	 Dio_WriteChannel(Dio_Channel_B1,STD_HIGH);
	 Dio_WriteChannel(Dio_Channel_B2,STD_HIGH);
	//Display 1
	for(uint8 num=0;num<10;num++){
 2d8:	cf 5f       	subi	r28, 0xFF	; 255
 2da:	ca 30       	cpi	r28, 0x0A	; 10
 2dc:	71 f7       	brne	.-36     	; 0x2ba <main+0x16>
 2de:	e4 cf       	rjmp	.-56     	; 0x2a8 <main+0x4>

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
