
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006da  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a1  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uartInit>:
}

char uartReceive(){
	while( !(UCSRA & (1<<RXC)));
	return UDR;
}
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <uartSend>:
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <uartSend>
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <uart_sendString>:
void uart_sendString(char *str){
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	fc 01       	movw	r30, r24
	char i=0;
	while(str[i]!='\0'){
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	59 f0       	breq	.+22     	; 0xbc <uart_sendString+0x24>
  a6:	8f 01       	movw	r16, r30
  a8:	c0 e0       	ldi	r28, 0x00	; 0
		uartSend(str[i]);
  aa:	0e 94 48 00 	call	0x90	; 0x90 <uartSend>
		i++;
  ae:	cf 5f       	subi	r28, 0xFF	; 255
	while( !(UCSRA & (1<<RXC)));
	return UDR;
}
void uart_sendString(char *str){
	char i=0;
	while(str[i]!='\0'){
  b0:	f8 01       	movw	r30, r16
  b2:	ec 0f       	add	r30, r28
  b4:	f1 1d       	adc	r31, r1
  b6:	80 81       	ld	r24, Z
  b8:	81 11       	cpse	r24, r1
  ba:	f7 cf       	rjmp	.-18     	; 0xaa <uart_sendString+0x12>
		uartSend(str[i]);
		i++;
	}
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

000000c4 <main>:
void uartSend(char data);

int main(void)
{
	
	uartInit();
  c4:	0e 94 41 00 	call	0x82	; 0x82 <uartInit>
	while (1)
	{
		
		uart_sendString("Mohamed\r\n");
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4c 00 	call	0x98	; 0x98 <uart_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x12>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x1c>
  e0:	00 00       	nop
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0x4>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
