
SPI_Mstr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000739  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000032  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Transfer>:


unsigned char SPI_Transfer(unsigned char sendByte){
	
	//PORTB&=~(1<<4);
	SPDR=sendByte;
  6c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_Transfer+0x2>
	return SPDR;
  72:	8f b1       	in	r24, 0x0f	; 15
}
  74:	08 95       	ret

00000076 <main>:

int main(void)
{ 
	SPI_Init();
  76:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_Init>
		// Set MOSI, SCK as Output
		DDRB=(1<<MOSI)|(1<<SCK);
  7a:	80 ea       	ldi	r24, 0xA0	; 160
  7c:	87 bb       	out	0x17, r24	; 23
		DDRB|=(1<<CS);
  7e:	b8 9a       	sbi	0x17, 0	; 23
	//LED0
	DDRC|=(1<<LED0)|(1<<CS);
  80:	84 b3       	in	r24, 0x14	; 20
  82:	85 60       	ori	r24, 0x05	; 5
  84:	84 bb       	out	0x14, r24	; 20
	//PORTB|=(1<<CS);
	PORTC&=~(1<<CS);
  86:	a8 98       	cbi	0x15, 0	; 21
		char recvByte=SPI_Transfer('1');
		//slave select Disable
		PORTC|=(1<<CS);
		if (recvByte=='2')
		{
		 	PORTC^=(1<<LED0);//PC2
  88:	c4 e0       	ldi	r28, 0x04	; 4
    while (1) 
    {
		
		
		 //slave select
		  PORTC&=~(1<<CS);
  8a:	a8 98       	cbi	0x15, 0	; 21
		char recvByte=SPI_Transfer('1');
  8c:	81 e3       	ldi	r24, 0x31	; 49
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
		//slave select Disable
		PORTC|=(1<<CS);
  92:	a8 9a       	sbi	0x15, 0	; 21
		if (recvByte=='2')
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	c9 f7       	brne	.-14     	; 0x8a <main+0x14>
		{
		 	PORTC^=(1<<LED0);//PC2
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	8c 27       	eor	r24, r28
  9c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	83 ed       	ldi	r24, 0xD3	; 211
  a2:	90 e3       	ldi	r25, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x2e>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x38>
  ae:	00 00       	nop
  b0:	ec cf       	rjmp	.-40     	; 0x8a <main+0x14>

000000b2 <SPI_Init>:


void SPI_Init(){
	
	//Master Mode CLK/16
	SPI->SPCR_REG=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
  b2:	81 e5       	ldi	r24, 0x51	; 81
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
