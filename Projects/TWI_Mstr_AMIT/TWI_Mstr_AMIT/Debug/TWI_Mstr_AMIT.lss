
TWI_Mstr_AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f2  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_Start>:
	TWBR=BIT_RATE(0x00);
	
}
void TWI_Start(){
	//send start
	TWCR=(1<<TWINT)|(1<<TWSTA) |(1<<TWEN);
  6c:	84 ea       	ldi	r24, 0xA4	; 164
  6e:	86 bf       	out	0x36, r24	; 54
	//check on the TWINT flage
	while(!(TWCR & (1<<TWINT)));
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <TWI_Start+0x4>
	//7:3=0xF8 1111 1 000
	while((TWSR&0xF8)!=0x08);
  76:	81 b1       	in	r24, 0x01	; 1
  78:	88 7f       	andi	r24, 0xF8	; 248
  7a:	88 30       	cpi	r24, 0x08	; 8
  7c:	e1 f7       	brne	.-8      	; 0x76 <TWI_Start+0xa>
}
  7e:	08 95       	ret

00000080 <TWI_addr>:
void TWI_addr(unsigned char addr){
	
	TWDR=addr;
  80:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
  82:	84 e8       	ldi	r24, 0x84	; 132
  84:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <TWI_addr+0x6>
	while((TWSR&0xF8)!=0x18);
  8c:	81 b1       	in	r24, 0x01	; 1
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	88 31       	cpi	r24, 0x18	; 24
  92:	e1 f7       	brne	.-8      	; 0x8c <TWI_addr+0xc>
}
  94:	08 95       	ret

00000096 <TWI_write>:
void TWI_write(unsigned char data){
	TWDR=data;
  96:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
  98:	84 e8       	ldi	r24, 0x84	; 132
  9a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <TWI_write+0x6>
	while((TWSR&0xF8)!=0x28);
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	88 32       	cpi	r24, 0x28	; 40
  a8:	e1 f7       	brne	.-8      	; 0xa2 <TWI_write+0xc>
}
  aa:	08 95       	ret

000000ac <TWI_stop>:
void  TWI_stop(){
	//stop condition
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  ac:	84 e9       	ldi	r24, 0x94	; 148
  ae:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <TWI_stop+0x4>
}
  b6:	08 95       	ret

000000b8 <main>:
#define SCL_FRE100K	100000L
#define BIT_RATE(TWSR)			((F_CPU/SCL_FRE100K)/(16+2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))))
#include <avr/io.h>
#include <util/delay.h>
void TWI_Init(){
	TWBR=BIT_RATE(0x00);
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	80 b9       	out	0x00, r24	; 0
{
   TWI_Init();
    while (1) 
    {
		//start
		 TWI_Start();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0xe>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x18>
  d0:	00 00       	nop
		 _delay_ms(100);
		 //SLA+w
		 TWI_addr(0x30);
  d2:	80 e3       	ldi	r24, 0x30	; 48
  d4:	0e 94 40 00 	call	0x80	; 0x80 <TWI_addr>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x26>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x30>
  e8:	00 00       	nop
		 _delay_ms(100);
		 //data
		 TWI_write('M');
  ea:	8d e4       	ldi	r24, 0x4D	; 77
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <TWI_write>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x3e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x48>
 100:	00 00       	nop
		 _delay_ms(100);
		 TWI_stop();	
 102:	0e 94 56 00 	call	0xac	; 0xac <TWI_stop>
 106:	da cf       	rjmp	.-76     	; 0xbc <main+0x4>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
